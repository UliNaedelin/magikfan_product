#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=restricted)
def_slotted_exemplar(
	:magik_exercise_check_2,
	{
	},
	{})
$

_pragma(classify_level=restricted)
_method magik_exercise_check_2.new()
	## 
	## 
	_return _clone.init()
_endmethod
$

_pragma(classify_level=restricted)
_method magik_exercise_check_2.init()
	## 
	## 
	_return _self 
_endmethod
$

_pragma(classify_level=restricted)
_method magik_exercise_check_2.test_run()
	## 
	##
	l_string << "Aufgabe 1.1. magikfan!elements_in_between():" + %tab  
	l_res_vec << {4,5,10,12,20}.magikfan!elements_in_between(5, 12)
	l_ok? << l_res_vec.size = 3 _andif
		 l_res_vec[1] _is 5 _andif
		 l_res_vec[2] _is 10 _andif
		 l_res_vec[3] _is 12
	write(l_string, l_ok?)

	l_string << "Aufgabe 1.2. magikfan!write_element_with_position():" + %tab  
	_block
		_dynamic !output!
		!output! << internal_text_output_stream.new()
		{4,5}.magikfan!write_element_with_position()
		l_res_string << !output!.string
	_endblock
	l_ok? << l_res_string = write_string("1: 4", newline_char,
					     "2: 5", newline_char)
	write(l_string, l_ok?)
	
	l_string << "Aufgabe 1.3. magikfan!find_position_of_element():" + %tab  
	l_res_1 << {4,5,10,12,20}.magikfan!find_position_of_element(19)
	l_res_2 << {4,5,10,12,20}.magikfan!find_position_of_element(10)
	l_res_3 << {4,5,10,"hello",20}.magikfan!find_position_of_element("hello")
	l_ok? << l_res_1 _is _unset _andif
		 l_res_2 _is 3 _andif
		 l_res_3 _is 4
	write(l_string, l_ok?)
	
	l_string << "Aufgabe 1.4. magikfan!find_all_positions_of_element():" + %tab  
	l_res_1 << {4,5,10,12,20}.magikfan!find_all_positions_of_element(19)
	l_res_2 << {4,5,10,12,10}.magikfan!find_all_positions_of_element(10)
	l_res_3 << {4,5,10,"hello",20, :hello}.magikfan!find_all_positions_of_element("hello")
	l_ok? << l_res_1 _isnt _unset _andif
		 l_res_1.size = 0 _andif
		 l_res_2.size _is 2 _andif
		 l_res_3.size _is 2
	write(l_string, l_ok?)
	
	l_string << "Aufgabe 1.5. magikfan!uppercase_letters():" + %tab  
	l_uppercase_string << "Das ist ein Test".magikfan!uppercase_letters()
	l_ok? << l_uppercase_string = "DAS IST EIN TEST"
	write(l_string, l_ok?)
	
	l_string << "Aufgabe 1.6. magikfan!uppercase_letters_in_situ():" + %tab
	l_uppercase_string << "Das ist ein Test"
	l_uppercase_string.magikfan!uppercase_letters_in_situ()
	l_ok? << l_uppercase_string = "DAS IST EIN TEST"
	write(l_string, l_ok?)

	l_string << "Aufgabe 1.7. magikfan!get_uppercase_letters():" + %tab  
	l_uppercase_string << "Das ist ein Test".magikfan!get_uppercase_letters()
	l_ok? << l_uppercase_string = "DT"
	write(l_string, l_ok?)

	l_string << "Aufgabe 1.8. magikfan!reverse_characters():" + %tab  
	l_reverse_string << "Hello".magikfan!reverse_characters()
	l_ok? << l_reverse_string = "olleH"
	write(l_string, l_ok?)

	l_string << "Aufgabe 1.9. magikfan!as_property_list():" + %tab  
	l_res_prop << {:january, 31, :february, 28}.magikfan!as_property_list()
	l_ok? << l_res_prop.size _is 2 _andif
		 l_res_prop[:january] _is 31 _andif
		 l_res_prop[:february] _is 28
	write(l_string, l_ok?)

	l_string << "Aufgabe 1.10. magikfan!element_at_position():" + %tab  
	l_res_1 << {7, 31, 28}.magikfan!element_at_position(2)
	l_res_2 << {7, 31, 28}.magikfan!element_at_position(5)
	l_ok? << l_res_1 _is 31 _andif
		 l_res_2 _is _unset 
	write(l_string, l_ok?)

	l_string << "Aufgabe 1.11. magikfan!element_at_position_with_try():" + %tab  
	l_res_1 << {7, 31, 28}.magikfan!element_at_position_with_try(2)
	l_res_2 << {7, 31, 28}.magikfan!element_at_position_with_try(5)
	l_ok? << l_res_1 _is 31 _andif
		 l_res_2 _is _unset 
	write(l_string, l_ok?)

	l_string << "Aufgabe 2.1. magikfan!write_fibonacci():" + %tab
	_block
		_dynamic !output!
		!output! << internal_text_output_stream.new()
		!current_package![:magikfan!write_fibonacci].invoke(5)
		l_res_string << !output!.string
	_endblock
	l_ok? << l_res_string = write_string("1", newline_char,
					     "1", newline_char,
					     "2", newline_char,
					     "3", newline_char,
					     "5", newline_char
				)
	write(l_string, l_ok?)

	l_string << "Aufgabe 2.2. magikfan!write_fibonacci():" + %tab
	_block
		_dynamic !output!
		!output! << internal_text_output_stream.new()
		5.magikfan!write_fibonacci()
		l_res_string << !output!.string
	_endblock
	l_ok? << l_res_string = write_string("1", newline_char,
					     "1", newline_char,
					     "2", newline_char,
					     "3", newline_char,
					     "5", newline_char
				)
	write(l_string, l_ok?)

	l_string << "Aufgabe 2.3. magikfan!fibonacci_number?():" + %tab
	l_res_1? << 8.magikfan!fibonacci_number?()
	l_res_2? << 9.magikfan!fibonacci_number?()	
	l_ok? << l_res_1? _is _true _andif
		 l_res_2? _is _false
	write(l_string, l_ok?)

	l_string << "Aufgabe 2.4. magikfan!highest_valid_fibonacci_number():" + %tab
	l_res_1 << 8.magikfan!highest_valid_fibonacci_number()
	l_res_2 << 9.magikfan!highest_valid_fibonacci_number()	
	l_ok? << l_res_1 _is 8 _andif
		 l_res_2 _is 8 
	write(l_string, l_ok?)	
_endmethod
$

