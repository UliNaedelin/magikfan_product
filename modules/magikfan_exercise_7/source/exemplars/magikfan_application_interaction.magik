#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=restricted)
def_slotted_exemplar(
	:magikfan_application_interaction,
	{
		{:application_name, _unset}
	},
	{})
$


_pragma(classify_level=restricted)
_method magikfan_application_interaction.new(p_application_name)
	## 
	## P_APPLICATION_NAME is the name of the application
	_return _clone.init(p_application_name)
_endmethod
$

_pragma(classify_level=restricted)
_private _method magikfan_application_interaction.init(p_application_name)
	## 
	## 
	.application_name << p_application_name
	_return _self 
_endmethod
$

_pragma(classify_level=restricted)
_method magikfan_application_interaction.get_application()
	## 
	## Returns application. In case application is not active
	## application is started
	l_application << smallworld_product.application(.application_name)
	_if l_application _is _unset
	_then
		l_app_def << smallworld_product.application_definition(.application_name)
		_if l_app_def _is _unset
		_then
			write("Application ", .application_name, " not found.")
			_return
		_endif
		l_app_def.start()
		l_application << smallworld_product.application(.application_name)
	_endif
	_return l_application
_endmethod
$

_pragma(classify_level=restricted)
_method magikfan_application_interaction.do_something_special()
	## 
	## 
	l_application << _self.get_application()
	_if l_application _is _unset
	_then
		write("Application ", .application_name, " not found.")
		_return
	_endif 
	
_endmethod
$
