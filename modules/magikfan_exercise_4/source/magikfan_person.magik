#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=restricted)
def_slotted_exemplar(
	:magikfan_person,
	{
		{:first_name, _unset},
		{:surname, _unset},
		{:birthdate, _unset}
	},
	{})
$

magikfan_person.define_slot_access(:surname, :readable)
$

magikfan_person.define_slot_access(:first_name, :readable)
$

magikfan_person.define_slot_access(:birthdate, :readable)
$


_pragma(classify_level=basic)
_method magikfan_person.new(p_first_name,
			    p_surname,
			    _optional p_birthdate)
	## 
	## Creates new instance of magikfan_person by using
	## _clone. Slot values are passed to method init()
	_return _clone.init(p_first_name,
			    p_surname,
			    p_birthdate)
_endmethod
$

_pragma(classify_level=basic)
_private _method magikfan_person.init(p_first_name,
				      p_surname,
				      p_birthdate)
	## 
	## Set slot values
	.first_name << p_first_name
	.surname << p_surname
	.birthdate << p_birthdate
	_return _self 
_endmethod
$


_pragma(classify_level=basic)
_method magikfan_person.full_name()
	## 
	## Returns first_name <space> surname
	_return .first_name + " " + .surname
_endmethod
$

_pragma(classify_level=basic)
_method magikfan_person.birthday_in_month??(p_month_number)
	## 
	## Returns true if .birthdate is in month P_MONTH_NUMBER, else
	## false. If .birthdate is unknown, return _maybe
	_if .birthdate _is _unset
	_then
		_return _maybe
	_endif 
	_return .birthdate.month_number = p_month_number
_endmethod
$


_pragma(classify_level=basic)
_method magikfan_person.is_older_than??(p_person)
	## 
	## If own birthdate is bigger than P_PERSON birthdate, return
	## true, if smaller return false. If birthdate is not set or
	## equal, return maybe
	_if (l_own_birthdate << .birthdate) _is _unset _orif
	    (l_other_birthdate << p_person.birthdate) _is _unset _orif
	    l_other_birthdate = l_own_birthdate
	_then
		_return _maybe
	_else
		_return l_own_birthdate < l_other_birthdate
	_endif
_endmethod
$


_pragma(classify_level=basic)
_method magikfan_person.age()
	## 
	## Return todays age of person.
	## year of today (date.now()) - year of birthdate
	## 
	_if .birthdate _is _unset
	_then
		_return
	_endif 
	l_today << date.now()
	l_result << l_today.year - .birthdate.year
	_if l_today.day_of_year < .birthdate.day_of_year
	_then
		l_result -<< 1
	_endif
	_return l_result
_endmethod
$
